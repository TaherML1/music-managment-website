name: music_app Pipeline

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/music_app:latest

jobs:
  build-jar:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: music-app-jar
          path: target/*.jar

  build-docker-image:
    runs-on: ubuntu-latest
    needs: build-jar
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download JAR 
        uses: actions/download-artifact@v4
        with:
          name: music-app-jar
          path: target/

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.AWS_KNOWN_HOSTS }}

      - name: Deploy Docker container on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} /bin/bash << 'EOS'
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              # Add temporary permission for current session
              sudo chmod 666 /var/run/docker.sock
            fi

            # Verify Docker installation
            if ! sudo docker info &> /dev/null; then
              echo "Docker is not running properly"
              exit 1
            fi

            # Pull latest image using the full image path
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/music_app:latest

            # Stop and remove old container if exists
            sudo docker stop music_app || true
            sudo docker rm music_app || true

            # Run new container with explicit image reference
            sudo docker run -d --name music_app -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/music_app:latest

            # Verify container is running
            if ! sudo docker ps | grep music_app; then
              echo "Container failed to start"
              exit 1
            fi
          EOS