name: music_app Pipeline

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/music_app:latest

jobs:
  build-jar:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: music-app-jar
          path: target/*.jar

  build-docker-image:
    runs-on: ubuntu-latest
    needs: build-jar
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download JAR 
        uses: actions/download-artifact@v4
        with:
          name: music-app-jar
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: [build-jar, build-docker-image]
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: music-app-jar
          path: target/

      - name: Verify JAR exists
        run: |
          ls -la target/
          if [ ! -f target/*.jar ]; then
            echo "Error: No JAR file found in target/"
            exit 1
          fi

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.AWS_KNOWN_HOSTS }}

      - name: Prepare EC2 environment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            if ! command -v java &> /dev/null; then
              echo "Java not found, installing..."
              sudo yum update -y
              sudo yum install -y java-17-amazon-corretto || exit 1
            fi
          EOF

      - name: Deploy JAR to EC2
        run: |
          JAR_FILE=$(ls target/*.jar)
          scp -o StrictHostKeyChecking=no "$JAR_FILE" ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }}:~/app.jar
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} "chmod +x ~/app.jar"

      - name: Deploy Docker container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo yum install -y docker || exit 1
              sudo systemctl start docker || exit 1
              sudo systemctl enable docker || exit 1
              sudo usermod -aG docker $USER || exit 1
              newgrp docker || true
            fi

            # Pull latest image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/music_app:latest || exit 1

            # Stop and remove old container if exists
            sudo docker stop music_app || true
            sudo docker rm music_app || true

            # Run new container
            sudo docker run -d --name music_app -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/music_app:latest || exit 1

            # Verify deployment
            echo "Java application deployed as:"
            ls -la ~/app.jar
            echo "Docker containers running:"
            sudo docker ps
          EOF