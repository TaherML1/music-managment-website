name: music_app Pipeline

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]

env:
  AWS_DEPLOY_PATH: /home/${{ secrets.AWS_USER }}/app
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/music_app:latest

jobs:
  build-jar:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: music-app-jar
          path: target/*.jar

  build-docker-image:
    runs-on: ubuntu-latest
    needs: build-jar
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download JAR 
        uses: actions/download-artifact@v4
        with:
          name: music-app-jar
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE

  deploy-to-ec-2:
    runs-on: ubuntu-latest
    needs: build-jar
    steps:
      - name: Download JAR 
        uses: actions/download-artifact@v4
        with:
          name: music-app-jar
          path: target
          
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.AWS_KNOWN_HOSTS }}
          
      - name: Prepare EC2 environment
        run: |
          # Create app directory and verify Java
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} <<EOF
            mkdir -p $AWS_DEPLOY_PATH
            if ! command -v java &> /dev/null; then
              echo "Java not found, installing..."
              sudo yum install -y java-17-amazon-corretto || \
              sudo apt-get install -y openjdk-17-jdk || \
              sudo zypper install -y java-17-openjdk
            fi
            java -version
          EOF
      - name: List downloaded files
        run: ls -la target/

      - name: Deploy JAR to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r target/*.jar ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }}:$AWS_DEPLOY_PATH
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} "chmod +x $AWS_DEPLOY_PATH/*.jar"

      - name: Verify deploymentt
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} <<EOF
            echo "Deployed files:"
            ls -la $AWS_DEPLOY_PATH
            echo "Java version:"
            java -version
          EOF